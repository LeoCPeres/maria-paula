import Head from "next/head";
import {
  Flex,
  Box,
  Button,
  Text,
  SimpleGrid,
  Card,
  CardBody,
  CardHeader,
  Heading,
  Image,
  keyframes,
  CardFooter,
  useDisclosure,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
} from "@chakra-ui/react";
import { motion } from "framer-motion";
import { useEffect, useState } from "react";
import Typewriter from "typewriter-effect";
import { options } from "../data/options";
import { setDoc, doc } from "firebase/firestore";
import { db } from "../services/firebase";

const whichStageText = (stage: number) =>
  ({
    1: "Oi, gatinha. Tudo bem? O Léo me mandou te entregar esse recado :)",
    2: "Ele disse que gostou muito do último encontro...",
    3: "E quer muito te ver de novo.",
    4: "Para isso, ele preparou algumas opções de date para você escolher.",
    5: "Mas antes... Ele precisa saber se você topa sair com ele no próximo final de semana.",
    6: "E aí, topa?",
    7: "Que bom que você fez a escolha certa :)",
    8: "Agora, escolha uma das opções de date",
    10: "Que legal! Tem certeza que deseja escolher essa opção?",
    11: "Eba! Agora é só esperar o Léo te ligar para combinar o date :)",
    12: "Obrigado pela atenção, Ma! Beijos do Stitch :)",
    99: "Você cancelou a ligação do Stitch :(",
  }[stage] as string);

const whichStageImage = (stage: number) =>
  ({
    0: "https://media.tenor.com/eAUe8lKjTh8AAAAM/boa-noite.gif",
    1: "https://media.tenor.com/EA66aDVI4H4AAAAM/lilo-and-stitch-waving.gif",
    2: "https://media.tenor.com/h1qbqS7iQxIAAAAi/stitch-hide.gif",
    3: "https://media.tenor.com/h1qbqS7iQxIAAAAi/stitch-hide.gif",
    4: "https://i.pinimg.com/originals/fe/d2/9e/fed29ea1fe4260d12130c07741b326df.gif",
    5: "https://media.tenor.com/CodoZtZolJwAAAAC/stitch.gif",
    6: "https://media.tenor.com/CodoZtZolJwAAAAC/stitch.gif",
    7: "https://media.tenor.com/c_tVFX3CxuIAAAAC/stitch-cheer.gif",
    8: "https://media.tenor.com/h1qbqS7iQxIAAAAi/stitch-hide.gif",
    10: "https://i.pinimg.com/originals/1c/e1/02/1ce102d9699ff031af2e1e7b331892d2.gif",
    11: "https://media.tenor.com/J7rMTU04zHQAAAAC/lilo-and-stitch-stitch.gif",
    12: "https://media.tenor.com/450SykKtiqcAAAAi/stitch-kiss.gif",
    99: "https://www.gifcen.com/wp-content/uploads/2022/09/stitch-gif-12.gif",
  }[stage] as string);

export default function Home() {
  const [text, setText] = useState(
    "Você está recebendo uma ligação do Stitch..."
  );
  const [stage, setStage] = useState(0);
  const [visible, setVisible] = useState(false);
  const [isQuestion, setIsQuestion] = useState(false);
  const [screenSize, setScreenSize] = useState(0);
  const [showOptions, setShowOptions] = useState(false);
  const [selectedOption, setSelectedOption] = useState(0);
  const [selectedTitle, setSelectedTitle] = useState("");

  function changeText(id?: number) {
    if (stage == 12) {
      location.reload();
    }
    setStage(stage + 1);
    setVisible(false);
    setText(whichStageText(stage + 1));

    if (id != null) {
      setSelectedOption(id);
      setShowOptions(false);
      setIsQuestion(true);
      setSelectedTitle(options.filter((x) => x.id == id)[0].title);
      return;
    }

    if (stage == 8) {
      setShowOptions(true);
    }

    if (stage + 1 == 6) {
      setIsQuestion(true);
    } else {
      setIsQuestion(false);
    }
  }

  function backToOptions() {
    setShowOptions(true);
    setStage(stage - 1);
  }

  function cancelCall() {
    setStage(99);
    setVisible(false);
    setText(whichStageText(99));
    setIsQuestion(false);
  }

  async function selectOption() {
    setStage(stage + 1);
    console.log(stage + 1);
    setVisible(false);
    setIsQuestion(false);
    setText(whichStageText(stage + 1));

    const uid = Math.floor(Math.random() * 100000).toString();
    const date = new Date();

    await setDoc(doc(db, "/options", uid), {
      date: date,
      option: selectedOption,
      title: selectedTitle,
    });
  }

  useEffect(() => {
    if (text == null) return;
    setScreenSize(window.innerWidth);

    // setText(whichStageText(8));

    if (stage == 99) return;

    const timer = text.length * 80;
    if (stage == 0) {
      setIsQuestion(true);
    }
    setTimeout(() => {
      setVisible(true);
    }, timer);
  }, [stage]);

  const animationKeyframes = keyframes`
  0% { transform: rotate(0deg); }
  25% { transform: rotate(5deg); }
  50% { transform: rotate(0deg); }
  75% { transform: rotate(-5deg); }
  100% { transform: rotate(0deg); }
`;

  const animation = `${animationKeyframes} 2s ease-in-out infinite`;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin="true"
        />
        <link
          href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;700&display=swap"
          rel="stylesheet"
        />
      </Head>
      <Flex
        w="100%"
        h={["100%", "100vh"]}
        align="center"
        justify="center"
        direction={["column", "row"]}
      >
        {showOptions ? (
          <SimpleGrid
            columns={3}
            fontFamily="JetBrains Mono"
            width={["100%", "70%"]}
            gap="1rem"
            minChildWidth={["240px", "400px"]}
          >
            {options.map((option) => {
              return (
                <Card border="2px solid black" key={option.id}>
                  <CardHeader textAlign="center">
                    <Heading size="md" fontFamily="JetBrains Mono">
                      Opção {option.id}
                    </Heading>
                  </CardHeader>
                  <CardBody
                    display="flex"
                    flexDirection="column"
                    alignItems="center"
                    justifyContent="center"
                    mt="-2rem"
                  >
                    <Box as={motion.div} animation={animation} mb="2rem">
                      <Image
                        src={option.srcImage}
                        alt=""
                        width="256px"
                        h="256px"
                      />
                    </Box>
                    <Text textAlign="center">{option.title}</Text>
                  </CardBody>
                  <CardFooter>
                    <Button
                      w="100%"
                      bg="black"
                      color="white"
                      colorScheme="none"
                      onClick={() => changeText(option.id)}
                    >
                      Quero esse!
                    </Button>
                  </CardFooter>
                </Card>
              );
            })}
          </SimpleGrid>
        ) : (
          <>
            <Box h="300px" mr={["0px", "1rem"]} mb={["2rem", "0px"]}>
              <img src={whichStageImage(stage)} alt="" width="300px" />
            </Box>
            <Flex w="300px" h="230px" direction="column">
              <Box
                fontFamily={"JetBrains Mono"}
                className={
                  screenSize <= 896 ? "bubble grow top" : "bubble grow left"
                }
                fontSize={["xs", "md"]}
              >
                {stage === 0 ? (
                  <Typewriter
                    onInit={(typewriter) => {
                      typewriter.typeString(text).start();
                    }}
                    options={{ delay: 60 }}
                  />
                ) : // <Ty words={text} cursor typeSpeed={60} cursorStyle="|" />
                stage === 1 ? (
                  <>
                    <Text display="none">{stage}</Text>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(text).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 2 ? (
                  <>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(text).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 3 ? (
                  <>
                    <Text display="none">{stage}</Text>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(text).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 4 ? (
                  <>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(text).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 5 ? (
                  <>
                    <Text display="none">{stage}</Text>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(text).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 6 ? (
                  <>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(text).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 7 ? (
                  <>
                    <Text display="none">{stage}</Text>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(text).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 8 ? (
                  <>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(text).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 10 ? (
                  <>
                    <Text display="none">{stage}</Text>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(whichStageText(stage)).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 11 ? (
                  <>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(whichStageText(stage)).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 12 ? (
                  <>
                    <Text display="none">{stage}</Text>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(whichStageText(stage)).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : stage === 99 ? (
                  <>
                    <Text display="none">{stage}</Text>
                    <Typewriter
                      onInit={(typewriter) => {
                        typewriter.typeString(text).start();
                      }}
                      options={{ delay: 60 }}
                    />
                  </>
                ) : (
                  ""
                )}
              </Box>
              {isQuestion == false && visible == true ? (
                <Button mt="2rem" onClick={() => changeText()}>
                  Continuar
                </Button>
              ) : isQuestion == true &&
                visible == true &&
                stage != 0 &&
                stage != 10 ? (
                <Flex
                  gap="1rem"
                  mt="2rem"
                  direction={["column-reverse", "row"]}
                >
                  <Button colorScheme="red" w={["100%", "40%"]} disabled>
                    Não :(
                  </Button>
                  <Button
                    colorScheme="green"
                    w={["100%", "60%"]}
                    onClick={() => changeText()}
                  >
                    Sim, topo muito :)
                  </Button>
                </Flex>
              ) : isQuestion == true && visible == true && stage == 0 ? (
                <Flex
                  gap="1rem"
                  mt="2rem"
                  direction={["column-reverse", "row"]}
                >
                  <Button
                    colorScheme="red"
                    w={["100%", "40%"]}
                    onClick={cancelCall}
                  >
                    Recusar
                  </Button>
                  <Button
                    colorScheme="green"
                    w={["100%", "60%"]}
                    onClick={() => changeText()}
                  >
                    Atender
                  </Button>
                </Flex>
              ) : isQuestion == true && visible == true && stage == 10 ? (
                <Flex
                  gap="1rem"
                  mt="2rem"
                  direction={["column-reverse", "row"]}
                >
                  <Button
                    colorScheme="red"
                    w={["100%", "40%"]}
                    onClick={backToOptions}
                  >
                    Voltar
                  </Button>
                  <Button
                    colorScheme="green"
                    w={["100%", "60%"]}
                    onClick={() => selectOption()}
                  >
                    Sim!
                  </Button>
                </Flex>
              ) : (
                ""
              )}
            </Flex>
          </>
        )}
      </Flex>
    </>
  );
}
